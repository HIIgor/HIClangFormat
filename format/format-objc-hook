#!/usr/bin/env bash
# ~/.git_template.local/hooks/pre-commit
# format-objc-hook
# pre-commit hook to check if any unformatted Objective-C files would be committed. Fails the check if so, and provides instructions.
#
# Copyright 2015 Square, Inc

IFS=$'\n'
export CDPATH=""
DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

source "$DIR"/lib/common-lib.sh
# Don't do anything unless a .clang-format file exists
#[ -e ".clang-format" ] || exit 0

objc_files=$(objc_files_to_format "$1")
[ -z "$objc_files" ] && exit 0



function format_objc() {
  success=0
  all_diff_code=
  for file in $objc_files; do
    # the diff line of file, it is a array type e.g. (1:5 7:19 55:99)
    diff_lines=$(changed_lines_of_file $file)

    diff_code=$("$DIR"/format-objc-file-dry-run.sh "$file" "${diff_lines[*]}" | diff "$file" -)

    diff_line_count=$(echo $diff_code | wc -l)

    if [[ $diff_line_count -gt 0 ]] && [[ ${#diff_code} -gt 0 ]] && [[ ! $(echo $diff_code) =~ "<      --- > " ]]; then
      if [ $success -eq 0 ]; then
        echo -e "ðŸš¸ Format and stage individual files:"
      fi
    	# This is what the dev can run to fixup an individual file
    	echo "\"$DIR\"/format-objc-file.sh '$file' $command && git add '$file';"
      
      all_diff_code[${#all_diff_code[@]}]=$file" "$(echo $diff_code)
    	success=1
    fi
  done
  # print detail info of files to be formatted
  if [[ ${#all_diff_code[@]} -gt 0 ]]; then
    echo -e "\nThe code that doesn't conform to the style is as follows:"
    for code in ${all_diff_code[@]}; do
      echo "$code"
    done
  fi
  if [ $success -gt 0 ]; then
      echo -e "\nðŸš€  Format and stage all affected files:\n\t \"$DIR\"/format-objc-files.sh -s"
  fi
  return $success 
}

success=0
format_objc || (echo -e "\nðŸ”´  There were formatting issues with this commit, run theðŸ‘† aboveðŸ‘† command to fix.\nðŸ’”  Commit anyway and skip this check by running git commit --no-verify" && success=1)

exit $success
